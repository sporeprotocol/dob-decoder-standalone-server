# identifier of specific DOB protocol versions
protocol_versions = [
    "dob/0"
]

# connect to the RPC of CKB node
ckb_rpc = "https://testnet.ckbapp.dev/"

# connect to the image fetcher service
image_fetcher_url = { btcfs = "https://mempool.space/testnet/api/tx/", ipfs = "https://ipfs.io/ipfs/" }

# address that rpc server running at in case of standalone server mode
rpc_server_address = "0.0.0.0:8090"

# native ckb-vm execution env in case of embeded ckb-vm feature
ckb_vm_runner = "ckb-vm-runner"

# directory that stores decoders on hard-disk, including on-chain and off-chain binary files
decoders_cache_directory = "cache/decoders"

# directory that stores DOBs rendering results on hard-disk
dobs_cache_directory = "cache/dobs"

# expiration time indicator for cleaning whole dobs cache, zero means never clean
dobs_cache_expiration_sec = 300

# identifier that represents the maximum combination of DOB/1
dob1_max_combination = 5

# identifier that represents the maximum number of caching images
dob1_max_cache_size = 100

# all deployed on-chain Spore contracts binary hash (order from new to old)
# refer to: https://github.com/sporeprotocol/spore-contract/blob/master/docs/VERSIONS.md
[[available_spores]]
code_hash = "0x685a60219309029d01310311dba953d67029170ca4848a4ff638e57002130a0d"
hash_type = "data1"

[[available_spores]]
code_hash = "0x5e063b4c0e7abeaa6a428df3b693521a3050934cf3b0ae97a800d1bc31449398"
hash_type = "data1"

[[available_spores]]
code_hash = "0x0b1f412fbae26853ff7d082d422c2bdd9e2ff94ee8aaec11240a5b34cc6e890f"
hash_type = "type"

# all deployed on-chain Cluster contracts binary hash (order from new to old)
# refer to: https://github.com/sporeprotocol/spore-contract/blob/master/docs/VERSIONS.md
[[available_clusters]]
code_hash = "0x0bbe768b519d8ea7b96d58f1182eb7e6ef96c541fbd9526975077ee09f049058"
hash_type = "data1"

[[available_clusters]]
code_hash = "0x7366a61534fa7c7e6225ecc0d828ea3b5366adec2b58206f2ee84995fe030075"
hash_type = "data1"

# associate `code_hash` with the corresponding onchain information about `tx_hash` and `out_index`
# server will firstly search onchain decoders by `code_hash` in this configuration, if not found, cache will be used instead

#
# DOB/0
#
[[onchain_decoder_deployment]]
code_hash = "0xb82abd59ade361a014f0abb692f71b0feb880693c3ccb95b9137b73551d872ce"
tx_hash = "0xb2497dc3e616055125ef8276be7ee21986d2cd4b2ce90992725386cabcb6ea7f"
out_index = 0

[[onchain_decoder_deployment]]
code_hash = "0x32f29aba4b17f3d05bec8cec55d50ef86766fd0bf82fdedaa14269f344d3784a"
tx_hash = "0x8725f0c9a1c634acfd783749c6bdd394c9085aaf4bd2b1ed88f5eb7ed11dfe95"
out_index = 0

[[onchain_decoder_deployment]]
code_hash = "0x1c84212ebd817e9de09d2a79f85cc421b684eda63409cfa75688f98716e77b5f"
tx_hash = "0xc877aca405da6a3038054cb5da20f2db0ed46bb643007d4e0b1d3fe7da155bf0"
out_index = 0

[[onchain_decoder_deployment]]
code_hash = "0x13cac78ad8482202f18f9df4ea707611c35f994375fa03ae79121312dda9925c"
tx_hash = "0x4a8a0d079f8438bed89e0ece1b14e67ab68e2aa7688a5f4917a59a185e0f8fd5"
out_index = 0

#
# DOB/1
#
[[onchain_decoder_deployment]]
code_hash = "0xac35b0e6178dc4a89fb85194b4ac0b60eed2b6ce9f10bf7bf2ee76190c3a0071"
tx_hash = "0x1918a656f7c52ca5fbe7a903903c9bbc89d3e05525b4bb9f323fceb1a5bde51f"
out_index = 0
